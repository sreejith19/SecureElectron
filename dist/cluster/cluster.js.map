{"version":3,"sources":["../../lib/cluster/cluster.ts"],"names":["remove","array","object","index","indexOf","splice","Cluster","constructor","workers","options","task","callback","_execute","workerCount","Math","max","os","cpus","length","sandboxOptions","start","inactiveWorkers","activeWorkers","queue","async","worker","ensureWorkers","code","signal","shutdown","clearWorkerTimeout","removeAllListeners","kill","total","i","forkWorker","send","initialize","push","path","join","__dirname","gid","uid","popWorker","setImmediate","shift","Error","clearTimeout","executionTimeout","finishWorker","removeWorker","execute","timeout","globals","context","Promise","resolve","reject","item","on","message","error","setTimeout","TimeoutError","JSON","stringify"],"mappings":"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","sourcesContent":["import { fork, ChildProcess } from 'child_process';\nimport path from 'path';\nimport async from 'async';\nimport os from 'os';\nimport onExit from 'signal-exit';\nimport { once } from 'lodash';\nimport { Options, ExecutionOptions, TimeoutError } from '../server/sandbox';\n\ninterface ClusterOptions extends Options {\n  workers?: number;\n}\n\nfunction remove(array, object) {\n  const index = array.indexOf(object);\n\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport default class Cluster {\n  workerCount: number;\n\n  inactiveWorkers: ChildProcess[];\n\n  activeWorkers: ChildProcess[];\n\n  queue: async.AsyncQueue<ExecutionOptions>;\n\n  sandboxOptions: Options;\n\n  constructor({ workers, ...options }: ClusterOptions = {}) {\n    this.workerCount = workers || Math.max(os.cpus().length, 4);\n    this.sandboxOptions = options;\n    this.start();\n  }\n\n  start() {\n    this.inactiveWorkers = [];\n    this.activeWorkers = [];\n    this.queue = async.queue(this.worker, this.workerCount);\n    this.ensureWorkers();\n\n    onExit((code, signal) => {\n      this.shutdown();\n    });\n  }\n\n  shutdown() {\n    for (const worker of this.inactiveWorkers) {\n      this.clearWorkerTimeout(worker);\n      worker.removeAllListeners();\n      worker.kill();\n    }\n\n    for (const worker of this.activeWorkers) {\n      this.clearWorkerTimeout(worker);\n      worker.removeAllListeners();\n      worker.kill();\n    }\n\n    this.inactiveWorkers = [];\n    this.activeWorkers = [];\n\n    if (this.queue) {\n      this.queue.kill();\n    }\n\n    this.queue = async.queue(this.worker, this.workerCount);\n  }\n\n  worker = (task, callback) => {\n    this._execute(task, callback);\n  };\n\n  ensureWorkers() {\n    const total = this.inactiveWorkers.length + this.activeWorkers.length;\n\n    for (let i = 0; i < this.workerCount - total; ++i) {\n      const worker = this.forkWorker();\n\n      worker.send({ initialize: true, ...this.sandboxOptions });\n\n      this.inactiveWorkers.push(worker);\n    }\n  }\n\n  forkWorker() {\n    return fork(path.join(__dirname, 'worker'), [], { gid: this.sandboxOptions.gid, uid: this.sandboxOptions.uid });\n  }\n\n  popWorker(callback) {\n    this.ensureWorkers();\n\n    if (this.inactiveWorkers.length === 0) {\n      setImmediate(() => {\n        this.popWorker(callback);\n      });\n\n      return;\n    }\n\n    const worker = this.inactiveWorkers.shift();\n\n    this.activeWorkers.push(worker);\n\n    if (this.activeWorkers.length + this.inactiveWorkers.length !== this.workerCount) {\n      throw new Error('invalid worker count');\n    }\n\n    callback(worker);\n  }\n\n  clearWorkerTimeout(worker) {\n    clearTimeout(worker.executionTimeout);\n    worker.executionTimeout = null;\n  }\n\n  finishWorker(worker) {\n    this.clearWorkerTimeout(worker);\n    remove(this.activeWorkers, worker);\n    this.inactiveWorkers.push(worker);\n  }\n\n  removeWorker(worker) {\n    this.clearWorkerTimeout(worker);\n\n    worker.kill();\n    worker.removeAllListeners();\n\n    remove(this.activeWorkers, worker);\n    remove(this.inactiveWorkers, worker);\n\n    this.ensureWorkers();\n  }\n\n  execute({ code, timeout, globals, context }: ExecutionOptions) {\n    return new Promise((resolve, reject) => {\n      const item = {\n        code,\n        timeout,\n        globals: globals || {},\n        context: context || {}\n      };\n\n      this.queue.push(item, resolve);\n    });\n  }\n\n  _execute({ code, timeout, globals, context }, callback) {\n    callback = once(callback);\n\n    this.popWorker((worker) => {\n      worker.removeAllListeners();\n\n      worker.on('message', (message) => {\n        this.finishWorker(worker);\n\n        callback(message);\n      });\n\n      worker.on('error', (message) => {\n        this.removeWorker(worker);\n\n        callback({ error: new Error('worker error') });\n      });\n\n      worker.on('disconnect', () => {\n        this.removeWorker(worker);\n\n        callback({ error: new Error('worker disconnected') });\n      });\n\n      worker.on('exit', (message) => {\n        this.removeWorker(worker);\n      });\n\n      if (timeout > 0) {\n        worker.executionTimeout = setTimeout(() => {\n          this.removeWorker(worker);\n          callback({ error: new TimeoutError(timeout) });\n        }, timeout);\n      }\n\n      worker.send({\n        code,\n        globals: JSON.stringify(globals),\n        context: JSON.stringify(context)\n      });\n    });\n  }\n}\n"],"file":"cluster.js"}